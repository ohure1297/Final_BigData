import streamlit as st
import subprocess
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

def page_mapreduce():
    st.title("üéØ Ph√¢n T√≠ch D·ªØ Li·ªáu Tuy·ªÉn D·ª•ng v·ªõi MapReduce")

    # C√°c t√≠nh nƒÉng ph√¢n t√≠ch
    features = {
        "Nh·ªØng c√¥ng vi·ªác c√≥ l∆∞∆°ng h∆°n 10 tri·ªáu": "Luong",
        "Nh·ªØng C√¥ng ty ·ªü H√† N·ªôi ho·∫∑c H·ªì Ch√≠ Minh": "DiaDiem",
        "Nh·ªØng c√¥ng vi·ªác kh√¥ng y√™u c·∫ßu kinh nghi·ªám": "KinhNghiem",
        "Nh·ªØng c√¥ng vi·ªác c·∫ßn ng√¥n ng·ªØ python": "Skill",
        "L∆∞∆°ng trung b√¨nh theo t·ª´ng th√†nh ph·ªë": "TinhTrungBinhLuong",
        "Top 10 c√¥ng vi·ªác c√≥ m·ª©c l∆∞∆°ng cao nh·∫•t": "Top10CV",
        "Nh·ªØng kƒ© nƒÉng tuy·ªÉn d·ª•ng theo s·ªë l∆∞·ª£ng": "KiNangCanThiet",
        "Top 10 th√†nh ph·ªë c√≥ nhi·ªÅu vi·ªác l√†m nh·∫•t": "Top10DiaDiem"
    }

    # T√™n c·ªôt t∆∞∆°ng ·ª©ng cho t·ª´ng lo·∫°i d·ªØ li·ªáu
    column_names = {
        "Luong": ["C√¥ng vi·ªác", "L∆∞∆°ng (tri·ªáu VND)"],
        "DiaDiem": ["C√¥ng ty", "Th√†nh ph·ªë"],
        "KinhNghiem": ["C√¥ng vi·ªác", "Kinh Nghi·ªám"],
        "Skill": ["C√¥ng vi·ªác", "Ng√¥n Ng·ªØ"],
        "TinhTrungBinhLuong": ["Th√†nh ph·ªë", "L∆∞∆°ng trung b√¨nh"],
        "Top10CV": ["C√¥ng vi·ªác", "L∆∞∆°ng"],
        "KiNangCanThiet": ["Kƒ© nƒÉng", "S·ªë l∆∞·ª£ng"],
        "Top10DiaDiem": ["Th√†nh ph·ªë", "S·ªë l∆∞·ª£ng"]
    }

    selected_feature = st.selectbox("Ch·ªçn t√≠nh nƒÉng ph√¢n t√≠ch", list(features.keys()))

    if st.button("Th·ª±c thi"):
        job_folder = features[selected_feature]
        map_path = f"/home/hadoopcong/Final_BigData/my_streamlit_app/mapreduce_jobs/{job_folder}/map.py"
        reduce_path = f"/home/hadoopcong/Final_BigData/my_streamlit_app/mapreduce_jobs/{job_folder}/reduce.py"
        input_path = "/user/hadoopcong/final.csv"
        output_path = f"/user/hadoopcong/output/{job_folder}"

        # X√≥a output c≈© (n·∫øu c√≥)
        subprocess.run(["hadoop", "fs", "-rm", "-r", output_path])

        # Ch·∫°y Hadoop Streaming
        result = subprocess.run(
            ["hadoop", "jar", "/home/hadoopcong/hadoop/share/hadoop/tools/lib/hadoop-streaming-3.4.1.jar",
             "-files", f"{map_path},{reduce_path}",
             "-mapper", f"python3 {map_path}",
             "-reducer", f"python3 {reduce_path}",
             "-input", input_path,
             "-output", output_path],
            stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True
        )

        st.subheader("üìÑ Log Th·ª±c Thi:")
        st.code(result.stdout + result.stderr)

        if result.returncode != 0:
            st.error(f"‚ùå L·ªói khi ch·∫°y job Hadoop: {result.stderr}")
            return

        try:
            # ƒê·ªçc k·∫øt qu·∫£ t·ª´ HDFS
            hdfs_output = subprocess.check_output(
                ["hadoop", "fs", "-cat", f"{output_path}/part-00000"], text=True
            )

            # Ph√¢n t√≠ch d·ªØ li·ªáu ƒë·∫ßu ra
            data = []
            for line in hdfs_output.splitlines():
                parts = line.strip().split("\t")
                if len(parts) == 2:
                    key, value = parts
                    try:
                        value = float(value)
                    except ValueError:
                        pass
                    data.append((key, value))

            if data:
                columns = column_names.get(job_folder, ["Key", "Value"])
                df = pd.DataFrame(data, columns=columns)

                st.subheader("üìã D·ªØ li·ªáu chi ti·∫øt")
                st.dataframe(df)

                # V·∫Ω bi·ªÉu ƒë·ªì
                st.subheader("üìä Bi·ªÉu ƒë·ªì ph√¢n t√≠ch")
                fig, ax = plt.subplots()

                if job_folder == "TinhTrungBinhLuong":
                    sns.barplot(data=df, x=columns[0], y=columns[1], ax=ax)
                    ax.set_title("L∆∞∆°ng trung b√¨nh theo th√†nh ph·ªë")
                    ax.set_xlabel("Th√†nh ph·ªë")
                    ax.set_ylabel("L∆∞∆°ng trung b√¨nh")

                elif job_folder == "Top10CV":
                    sns.barplot(data=df, x=columns[1], y=columns[0], ax=ax, orient='h')
                    ax.set_title("Top 10 C√¥ng Vi·ªác L∆∞∆°ng Cao Nh·∫•t")
                    ax.set_xlabel("L∆∞∆°ng (tri·ªáu VND)")
                    ax.set_ylabel("C√¥ng vi·ªác")

                elif job_folder == "KiNangCanThiet":
                    sns.barplot(data=df, x=columns[0], y=columns[1], ax=ax)
                    ax.set_title("S·ªë l∆∞·ª£ng tuy·ªÉn d·ª•ng theo k·ªπ nƒÉng")
                    ax.set_xlabel("K·ªπ nƒÉng")
                    ax.set_ylabel("S·ªë l∆∞·ª£ng")

                elif job_folder == "Top10DiaDiem":
                    sns.barplot(data=df, x=columns[1], y=columns[0], ax=ax, orient='h')
                    ax.set_title("Top 10 Th√†nh Ph·ªë C√≥ Nhi·ªÅu Vi·ªác L√†m Nh·∫•t")
                    ax.set_xlabel("S·ªë l∆∞·ª£ng vi·ªác l√†m")
                    ax.set_ylabel("Th√†nh ph·ªë")

                elif job_folder in ["Luong", "DiaDiem", "KinhNghiem", "Skill"]:
                    sns.scatterplot(data=df, x=columns[0], y=columns[1], ax=ax)
                    ax.set_title(f"Ph√¢n t√≠ch {selected_feature}")
                    ax.set_xlabel(columns[0])
                    ax.set_ylabel(columns[1])

                st.pyplot(fig)
            else:
                st.warning("‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu hi·ªÉn th·ªã.")
        except subprocess.CalledProcessError:
            st.error("‚ùå Kh√¥ng th·ªÉ ƒë·ªçc k·∫øt qu·∫£ t·ª´ HDFS!")
